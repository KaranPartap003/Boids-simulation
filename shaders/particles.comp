#version 430 core

layout (local_size_x = 128) in;

// Buffer containing curr pos and vel of particles
layout(rgba32f, binding = 0) uniform imageBuffer position_buffer;
layout(rgba32f, binding = 1) uniform imageBuffer velocity_buffer;
layout(rgba32f, binding = 2) uniform imageBuffer color_buffer;

layout(rgba32f, binding = 3) uniform imageBuffer PrevPosition_buffer;
layout(rgba32f, binding = 4) uniform imageBuffer PrevVelocity_buffer;
layout(rgba32f, binding = 5) uniform imageBuffer PrevColor_buffer;

// Delta time
uniform float dt;
//no of particles
uniform int particles;

// Parameters for boids algorithm
uniform float viewRadius;
uniform float avoidRadius;
uniform float cohesionWeight;
uniform float alignmentWeight;
uniform float separationWeight;
uniform float boundary;
uniform vec3 MaxB;
uniform vec3 MinB;
uniform float FOV;

void main() {
    // Read current position and velocity from buffer w.r.t invocationID
    int particleIndex =  int(gl_GlobalInvocationID.x);
    vec4 vel = imageLoad(PrevVelocity_buffer, particleIndex);
    vec4 pos = imageLoad(PrevPosition_buffer, particleIndex);
    vec4 col = imageLoad(PrevPosition_buffer, particleIndex);

    int i;
    // Initialize variables for boids algorithm
    vec3 flockHeading = vec3(0.0);
    vec3 flockCentre = vec3(0.0);
    vec3 separationHeading = vec3(0.0);
    vec4 flockColor = vec4(0.0);
    int numFlockmates = 0;
    for(i = 0; i<particles; ++i)
    {
        if(i != particleIndex)
        {
            vec4 otherPos = imageLoad(position_buffer, i);
            vec3 offset = otherPos.xyz - pos.xyz;
            float dist = length(offset);
            if(dist <= viewRadius){
                vec3 v1 = normalize(offset); //distance between particles
                vec3 v2 = normalize(vel.xyz);//front vector
                if(dot(v1, v2) >= FOV){ //FILTERING based on Field of view
                    vec4 otherVel = imageLoad(velocity_buffer, i);
                    flockHeading += otherVel.xyz;
                    flockCentre += otherPos.xyz;
                    flockColor += imageLoad(color_buffer, i);
                    if(dist < avoidRadius){
                        separationHeading -= v1;
                    }
                    numFlockmates++;
                }
            }
        }
    }
    // Apply flocking behavior
    if (numFlockmates > 0) {
        flockHeading /= float(numFlockmates);
        flockCentre /= float(numFlockmates);

        // Calculate cohesion behavior (move towards the center of mass)
        vec3 cohesion = normalize(flockCentre - pos.xyz) * cohesionWeight;

        // Calculate alignment behavior (align particle's velocity with neighbors)
        vec3 alignment = normalize(flockHeading - vel.xyz) * alignmentWeight;

        // Calculate separation behavior (prevent collisions)
        vec3 separation = separationHeading * separationWeight;

        // Combine flocking behaviors
        vec3 desiredVelocity =  cohesion + alignment + separation;

        // Update velocity scaled by dt
        vel.xyz += desiredVelocity * dt;
        
        col = flockColor/numFlockmates;
    }
    if (any(lessThan(pos.xyz, MinB)) || any(greaterThan(pos.xyz, MaxB))) {
        // Calculate a vector pointing towards the center of the simulation space
        vec3 centerDirection = -normalize(pos.xyz);

        // Rotate the boid's velocity to point away from the boundary
        vel.xyz = normalize(mix(vel.xyz, centerDirection, 0.1)) * 0.5;
    }
    // Update position using curr vel * time
    pos.xyz += vel.xyz * dt;
    // Store new pos and velocity back into the buffer
    imageStore(position_buffer, int(gl_GlobalInvocationID.x), pos);
    imageStore(velocity_buffer, int(gl_GlobalInvocationID.x), vel);
    imageStore(color_buffer, int(gl_GlobalInvocationID.x), col);
}
